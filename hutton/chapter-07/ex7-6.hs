import Prelude hiding (map, iterate)

-----------------------------------------------------------
-- Exercise 7.6

-- takes a predicate p, a function h and a function t
-- and returns a list of values generated by repeatedly
-- applying h to a seed value x. This continues until the
-- predicate p returns True for the current value of x.
-- The function t is used to repeatedly transform the
-- current value of x to the next seed value for h.
unfold :: (a -> Bool) -> (a -> b) -> (a -> a) -> a -> [b]
unfold p h t x 
  | p x = []
  | otherwise = h x : unfold p h t (t x)

-- takes a list and chops it into chunks of 8 elements
-- each, returning a list of these chunks.
chop8 :: [a] -> [[a]]
chop8 = unfold null (take 8) (drop 8)

-- defines map using unfold
map :: (a -> b) -> [a] -> [b]
map f = unfold null (f . head) tail

-- defines iterate using unfold; note that iterate
-- generates an infinite list of repeated applications
-- of the function f to the initial value x
iterate :: (a -> a) -> a -> [a]
iterate f = unfold (\_ -> False) id f

-----------------------------------------------------------

{- Examples:

  ghci> chop8 "abcdefghijklmnopqrstuvwxyz"
  ["abcdefgh","ijklmnop","qrstuvwx","yz"]
  
  ghci> map (+1) [1,2,3,4]
  [2,3,4,5]

  ghci> take 6 (iterate (+1) 0)
  [0,1,2,3,4,5]
-}